//////////////////////////////////  @版权说明  //////////////////////////////////////////////////
///						Jiedi(China nanjing)Ltd.                                    
/// @版权说明 代码和课程版权有夏曹俊所拥有并已经申请著作权，此代码可用作为学习参考并可在项目中使用，
/// 课程中涉及到的其他开源软件，请遵守其相应的授权
/// 课程源码不可以直接转载到公开的博客，或者其他共享平台，不可以用以制作在线课程。
/// 课程中涉及到的其他开源软件，请遵守其相应的授权  @@              
/////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////  源码说明  //////////////////////////////////////////////////
/// 项目名称: CMake构建大型c++项目
/// 博客   : 			    http://blog.csdn.net/jiedichina
/// 腾讯课堂			    https://jiedi.ke.qq.com/
/// 学浪				    搜索 夏曹俊
/// 老夏课堂			    http://cppds.com 
/// CMake手册    	        http://cmake.org.cn
/// ！！！请加入课程qq群 【296249312】与同学交流 
/// 欢迎加夏曹俊老师的微信：cppxcj
///加入老夏课堂群【296249312】直接联系群里客服下载课程资料
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// 课程交流qq群296249312 //////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////// COMMENT ///////////////////////////////////////////////

#ifndef XTHREAD_H
#define XTHREAD_H
#include <thread>
#include <memory>
namespace xcpp
{ 
    class XThread
    {
        /**
         * @brief  构造, 表示当前运行的线程，
         *  		join和detach在不能在该对象上调用
         * explicit 不能隐式转换 比如 th1 = th2 
        */
        explicit XThread(); 

        /**
         * @brief  等待当前线程结束
         */
        void Join();

        /**
         * @brief  detach, 分离线程与thread对象
         */
        void Detach();

        /**
         * @brief  获取当前线程id.
         *
         * @return 当前线程id
         */
        std::thread::id id() const;

        /**
         * @brief  Sleep 当前线程释放cpu 
         *  
         * @param millsecond 毫秒
         */
        static void Sleep(int ms);
        
        /**
         * @brief  交出当前线程控制权
         */
        static void Yield();
    private:
        std::unique_ptr<std::thread> th_;
    };
}
#endif