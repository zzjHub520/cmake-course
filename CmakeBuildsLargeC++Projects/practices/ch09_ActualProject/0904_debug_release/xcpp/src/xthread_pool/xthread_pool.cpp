//////////////////////////////////  @版权说明  //////////////////////////////////////////////////
///						Jiedi(China nanjing)Ltd.                                    
/// @版权说明 代码和课程版权有夏曹俊所拥有并已经申请著作权，此代码可用作为学习参考并可在项目中使用，
/// 课程中涉及到的其他开源软件，请遵守其相应的授权
/// 课程源码不可以直接转载到公开的博客，或者其他共享平台，不可以用以制作在线课程。
/// 课程中涉及到的其他开源软件，请遵守其相应的授权  @@              
/////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////  源码说明  //////////////////////////////////////////////////
/// 项目名称: CMake构建大型c++项目
/// 博客   : 			    http://blog.csdn.net/jiedichina
/// 腾讯课堂			    https://jiedi.ke.qq.com/
/// 学浪				    搜索 夏曹俊
/// 老夏课堂			    http://cppds.com 
/// CMake手册    	        http://cmake.org.cn
/// ！！！请加入课程qq群 【296249312】与同学交流 
/// 欢迎加夏曹俊老师的微信：cppxcj
///加入老夏课堂群【296249312】直接联系群里客服下载课程资料
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// 课程交流qq群296249312 //////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////// COMMENT ///////////////////////////////////////////////

#include "xthread_pool.h"
#include <iostream>


namespace xcpp
{

using namespace std;
using namespace this_thread;

//线程池函数
void XThreadPool::Run()
{ 
    //cout << "Run " << get_id() << endl;
    while(!is_exit_)
    {
        unique_lock<mutex> lock(mux_);
        cv_.wait(lock, [this] 
        {
            return is_exit_||!tasks_.empty();
        });
        while (!tasks_.empty())
        {
            tasks_.front()();
            tasks_.pop();
        }
    }
    //task();
}

void XThreadPool::Stop()
{
    is_exit_ = true;
    cv_.notify_all();
    //unique_lock<mutex> lock(mux_);
    //is_exit_ = true;
    //num值判断，确定threads_,是否已经初始化
    for(auto &th :threads_)
    {
        th->join();
    }
    unique_lock<mutex> lock(mux_);
    threads_.clear();
}
void XThreadPool::Start(int num)
{
    unique_lock<mutex> lock(mux_);
    //num值判断，确定threads_,是否已经初始化
    for (int i = 0; i < num; i++)
    {
        auto th = make_shared<thread>(&XThreadPool::Run, this);
        threads_.push_back(th);
    }
}

}